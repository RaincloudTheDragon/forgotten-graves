plugins {
    id 'fabric-loom' version '1.6.12'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = "${property("mod_version")}"
group = project.maven_group

// Add a task to copy resources to version-specific directories
task copyResourcesToVersions {
    doLast {
        def version = stonecutter.current.version
        def targetDir = file("versions/${version}/src/main/resources")
        
        // Clean up any existing nested directories
        def nestedDir = file("versions/${version}/versions")
        if (nestedDir.exists()) {
            nestedDir.deleteDir()
        }
        
        // Ensure target directory exists and is clean
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
        targetDir.mkdirs()
        
        // Copy all resources
        copy {
            from sourceSets.main.resources
            into targetDir
            exclude "**/versions/**"
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            
            // Process version variables in fabric.mod.json
            filesMatching("fabric.mod.json") {
                expand(
                    "version": project.version + "+" + version,
                    "loader_version": project.loader_version,
                    "fabric_version": project.fabric_version,
                    "minecraft_version": version,
                    "cloth_config_version": project.cloth_config_version
                )
            }
        }
        
        println "Copied resources to ${targetDir}"
    }
}

// Make sure resources are copied before processing
processResources.dependsOn copyResourcesToVersions

// Add a task to clean up nested directories
task cleanupNestedResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def nestedDir = file("versions/${currentVersion}/versions")
        if (nestedDir.exists()) {
            nestedDir.deleteDir()
            println "Cleaned up nested directory: ${nestedDir}"
        }
    }
}

// Make sure nested directories are cleaned up before copying resources
copyResourcesToVersions.dependsOn cleanupNestedResources

repositories {
    mavenCentral()

    // Trinkets
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://maven.ladysnake.org/releases"
    }

    // Cloth Config
    maven {
        url = "https://maven.shedaniel.me/"
    }

    // Inventorio
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

// Datagen
loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=forgottengraves"

            runDir "build/datagen"
        }
        
        client {
            // Modern authentication for Microsoft accounts
            vmArg "-Dfabric.loom.modern.auth=true"
            vmArg "-Dfabric.loom.auth.type=microsoft"
            
            // Optional: add this if you want to be able to debug the game
            vmArg "-Dfabric.log.level=debug"
            
            // Use clientBranchName property to make breakpoints easier to manage for multiple versions
            property "fabric.loom.launch.use-modern-auth", "true"
            property "fabric.loom.launch.auth-type", "microsoft"
        }

        // This adds a run config for GameTest api
        gametest {
            server()
            name "Game Test"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/test_results.xml"
            runDir "build/gametest"
        }
    }
    
    // Add mixin configuration
    mixin {
        defaultRefmapName.set("graves.refmap.json")
        useLegacyMixinAp.set(false)
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                'src/main/generated',
                'src/main/resources'
            ]
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${stonecutter.current.version}" // provide version with stonecutter
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Cloth/Auto Config
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

    // Compat Mods
    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modCompileOnly "maven.modrinth:inventorio:${project.inventorio_version}"

    // Needed for trinkets
    def ccaVersion = "6.0.0"
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${ccaVersion}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${ccaVersion}")
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
            
            // Use the authenticated Minecraft client for online play
            property "fabric.development", "true"
            property "fabric-api.development", "true"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    
    inputs.property "version", project.version
    inputs.property "minecraft_version", stonecutter.current.version
    inputs.property "loader_version", project.loader_version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "cloth_config_version", project.cloth_config_version

    from(sourceSets.main.resources) {
        include "**/*"
        
        // Process version variables in fabric.mod.json
        filesMatching("fabric.mod.json") {
            expand(
                "version": project.version + "+" + stonecutter.current.version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version,
                "minecraft_version": stonecutter.current.version,
                "cloth_config_version": project.cloth_config_version
            )
        }
    }
}

// Configure all copy tasks to use INCLUDE duplicates strategy
tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    it.options.encoding = "UTF-8"
    it.options.release = mod_java_version as Integer
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

// Add a task to ensure resources are in the correct location
task ensureResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        if (!resourcesDir.exists()) {
            resourcesDir.mkdirs()
        }
        
        // Copy assets
        copy {
            from "src/main/resources"
            into resourcesDir
            include "assets/**"
            include "data/**"
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
    }
}

// Make sure resources are in the correct location before processing
processResources.dependsOn ensureResources

// Add a task to ensure mixin configuration is properly included
task ensureMixinConfig {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        def mixinConfig = file("src/main/resources/graves.mixins.json")
        if (mixinConfig.exists()) {
            copy {
                from mixinConfig
                into resourcesDir
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure mixin configuration is included before processing
processResources.dependsOn ensureMixinConfig

// Add a task to ensure mixin configuration is properly formatted
task formatMixinConfig {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        def mixinConfig = file("${resourcesDir}/graves.mixins.json")
        if (mixinConfig.exists()) {
            def json = new groovy.json.JsonSlurper().parse(mixinConfig)
            def writer = new FileWriter(mixinConfig)
            new groovy.json.JsonBuilder(json).writeTo(writer)
            writer.close()
        }
    }
}

// Make sure mixin configuration is properly formatted before processing
processResources.dependsOn formatMixinConfig

// Add a task to ensure mixin configuration is properly included in the jar
task ensureMixinConfigInJar {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        def mixinConfig = file("${resourcesDir}/graves.mixins.json")
        if (mixinConfig.exists()) {
            copy {
                from mixinConfig
                into "${buildDir}/resources/main"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure mixin configuration is included in the jar before processing
processResources.dependsOn ensureMixinConfigInJar

// Add a task to ensure resources are in the correct location for sourcesJar
task ensureSourcesJarResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        if (resourcesDir.exists()) {
            copy {
                from resourcesDir
                into "${buildDir}/resources/main"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure resources are in the correct location for sourcesJar
sourcesJar.dependsOn ensureSourcesJarResources

// Add a task to ensure resources are in the correct location for jar
task ensureJarResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        if (resourcesDir.exists()) {
            copy {
                from resourcesDir
                into "${buildDir}/resources/main"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure resources are in the correct location for jar
jar.dependsOn ensureJarResources

// Add a task to ensure resources are in the correct location for remapJar
task ensureRemapJarResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        if (resourcesDir.exists()) {
            copy {
                from resourcesDir
                into "${buildDir}/resources/main"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure resources are in the correct location for remapJar
remapJar.dependsOn ensureRemapJarResources

// Add a task to ensure resources are in the correct location for remapSourcesJar
task ensureRemapSourcesJarResources {
    doLast {
        def currentVersion = stonecutter.current.version
        def resourcesDir = file("versions/${currentVersion}/src/main/resources")
        if (resourcesDir.exists()) {
            copy {
                from resourcesDir
                into "${buildDir}/resources/main"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

// Make sure resources are in the correct location for remapSourcesJar
remapSourcesJar.dependsOn ensureRemapSourcesJarResources

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.allSource
}

// Add a task for faster development cycle
task dev {
    dependsOn ':1.20.6:build'
    doLast {
        println "Mod built successfully. Launch Minecraft with Fabric 1.20.6 to test."
        println "The mod JAR is linked to your Minecraft mods folder."
    }
}

// Add a version-specific dev task
task dev1206 {
    dependsOn ':1.20.6:build'
    doLast {
        println "Mod built successfully for 1.20.6. Launch Minecraft with Fabric 1.20.6 to test."
        println "The mod JAR is linked to your Minecraft mods folder."
    }
}